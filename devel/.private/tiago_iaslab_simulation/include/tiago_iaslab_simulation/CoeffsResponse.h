// Generated by gencpp from file tiago_iaslab_simulation/CoeffsResponse.msg
// DO NOT EDIT!


#ifndef TIAGO_IASLAB_SIMULATION_MESSAGE_COEFFSRESPONSE_H
#define TIAGO_IASLAB_SIMULATION_MESSAGE_COEFFSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiago_iaslab_simulation
{
template <class ContainerAllocator>
struct CoeffsResponse_
{
  typedef CoeffsResponse_<ContainerAllocator> Type;

  CoeffsResponse_()
    : coeffs()  {
    }
  CoeffsResponse_(const ContainerAllocator& _alloc)
    : coeffs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _coeffs_type;
  _coeffs_type coeffs;





  typedef boost::shared_ptr< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CoeffsResponse_

typedef ::tiago_iaslab_simulation::CoeffsResponse_<std::allocator<void> > CoeffsResponse;

typedef boost::shared_ptr< ::tiago_iaslab_simulation::CoeffsResponse > CoeffsResponsePtr;
typedef boost::shared_ptr< ::tiago_iaslab_simulation::CoeffsResponse const> CoeffsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator1> & lhs, const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.coeffs == rhs.coeffs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator1> & lhs, const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago_iaslab_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b71cfea2226a7084c29c0b3987c6e123";
  }

  static const char* value(const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb71cfea2226a7084ULL;
  static const uint64_t static_value2 = 0xc29c0b3987c6e123ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago_iaslab_simulation/CoeffsResponse";
  }

  static const char* value(const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] coeffs\n"
"\n"
;
  }

  static const char* value(const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coeffs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CoeffsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago_iaslab_simulation::CoeffsResponse_<ContainerAllocator>& v)
  {
    s << indent << "coeffs[]" << std::endl;
    for (size_t i = 0; i < v.coeffs.size(); ++i)
    {
      s << indent << "  coeffs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coeffs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO_IASLAB_SIMULATION_MESSAGE_COEFFSRESPONSE_H
