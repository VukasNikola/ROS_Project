// Generated by gencpp from file tiago_iaslab_simulation/ObjsRequest.msg
// DO NOT EDIT!


#ifndef TIAGO_IASLAB_SIMULATION_MESSAGE_OBJSREQUEST_H
#define TIAGO_IASLAB_SIMULATION_MESSAGE_OBJSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiago_iaslab_simulation
{
template <class ContainerAllocator>
struct ObjsRequest_
{
  typedef ObjsRequest_<ContainerAllocator> Type;

  ObjsRequest_()
    : ready(false)  {
    }
  ObjsRequest_(const ContainerAllocator& _alloc)
    : ready(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ready_type;
  _ready_type ready;





  typedef boost::shared_ptr< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ObjsRequest_

typedef ::tiago_iaslab_simulation::ObjsRequest_<std::allocator<void> > ObjsRequest;

typedef boost::shared_ptr< ::tiago_iaslab_simulation::ObjsRequest > ObjsRequestPtr;
typedef boost::shared_ptr< ::tiago_iaslab_simulation::ObjsRequest const> ObjsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator1> & lhs, const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ready == rhs.ready;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator1> & lhs, const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago_iaslab_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f378c6311f9e6ccd2cd8c5b327003f1";
  }

  static const char* value(const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f378c6311f9e6ccULL;
  static const uint64_t static_value2 = 0xd2cd8c5b327003f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago_iaslab_simulation/ObjsRequest";
  }

  static const char* value(const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ready          #if true apriltag_ids sends the apriltags IDs, otherwise prints an error and kill ros\n"
;
  }

  static const char* value(const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ready);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago_iaslab_simulation::ObjsRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO_IASLAB_SIMULATION_MESSAGE_OBJSREQUEST_H
