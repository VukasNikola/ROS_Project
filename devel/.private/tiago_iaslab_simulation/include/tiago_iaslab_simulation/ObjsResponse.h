// Generated by gencpp from file tiago_iaslab_simulation/ObjsResponse.msg
// DO NOT EDIT!


#ifndef TIAGO_IASLAB_SIMULATION_MESSAGE_OBJSRESPONSE_H
#define TIAGO_IASLAB_SIMULATION_MESSAGE_OBJSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiago_iaslab_simulation
{
template <class ContainerAllocator>
struct ObjsResponse_
{
  typedef ObjsResponse_<ContainerAllocator> Type;

  ObjsResponse_()
    : ids()  {
    }
  ObjsResponse_(const ContainerAllocator& _alloc)
    : ids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _ids_type;
  _ids_type ids;





  typedef boost::shared_ptr< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ObjsResponse_

typedef ::tiago_iaslab_simulation::ObjsResponse_<std::allocator<void> > ObjsResponse;

typedef boost::shared_ptr< ::tiago_iaslab_simulation::ObjsResponse > ObjsResponsePtr;
typedef boost::shared_ptr< ::tiago_iaslab_simulation::ObjsResponse const> ObjsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator1> & lhs, const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ids == rhs.ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator1> & lhs, const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago_iaslab_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f22efebf407aadba2ecc69df353d113";
  }

  static const char* value(const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f22efebf407aadbULL;
  static const uint64_t static_value2 = 0xa2ecc69df353d113ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago_iaslab_simulation/ObjsResponse";
  }

  static const char* value(const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] ids\n"
"\n"
;
  }

  static const char* value(const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago_iaslab_simulation::ObjsResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "ids: ";
    if (v.ids.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int32_t>::stream(s, true ? std::string() : indent + "    ", v.ids[i]);
    }
    if (v.ids.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO_IASLAB_SIMULATION_MESSAGE_OBJSRESPONSE_H
